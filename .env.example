# Example Environment Variables for the Cypress Test Automation Framework

# --- Base Configuration ---
# Base URL of the application under test
# CYPRESS_BASE_URL=http://localhost:3000

# --- API Endpoints ---
# Example: API base URL
# API_BASE_URL=http://localhost:3001/api/v1
# Example: GraphQL endpoint
# GRAPHQL_ENDPOINT=http://localhost:3001/graphql

# --- Authentication Credentials (USE SPARINGLY and prefer dynamic login) ---
# These are examples. For CI, use Jenkins credentials or other secure secret management.
# Avoid committing actual sensitive credentials.
# TEST_USERNAME=user@example.com
# TEST_PASSWORD=secretpassword
# API_LOGIN_URL=/auth/login # Endpoint for cy.loginViaApi if used

# --- Third-party Service Keys (Mask sensitive ones) ---
# Example: API key for a service used by tests
# SERVICE_API_KEY=your_service_api_key_example

# --- Reporting ---
# ALLURE_RESULTS_DIR=allure-results # Default, can be overridden if needed

# --- Slack Notifications (for CI/CD pipeline) ---
# SLACK_WEBHOOK_URL=your_slack_webhook_url # For custom script notifications
# SLACK_CHANNEL=#ci-alerts # For Jenkins plugin or custom scripts
# SLACK_BOT_TOKEN=xoxb-your-slack-bot-token # For more advanced Slack integrations

# --- Database Connection (if using cy.task() for DB interactions) ---
# DB_HOST=localhost
# DB_PORT=5432
# DB_USER=testuser
# DB_PASSWORD=testpassword
# DB_NAME=testdb

# --- Feature Flags or Environment Specific Settings ---
# FEATURE_X_ENABLED=true
# TARGET_ENVIRONMENT=staging # e.g., dev, staging, prod

# --- Secret Masking ---
# Cypress Cloud and some CI systems can automatically mask environment variables
# that are configured as secrets.
# For local .env files, ensure they are in .gitignore (which it is).
# If logging variables, be mindful of not logging sensitive data directly.
# The framework's cypress.config.ts loads these via dotenv.

# Instructions:
# 1. Copy this file to .env
# 2. Fill in the actual values for your environment(s).
# 3. Ensure .env is listed in your .gitignore file to prevent committing secrets.
# 4. Access these variables in your tests using Cypress.env('YOUR_VARIABLE_NAME').
#    Example: const baseUrl = Cypress.env('CYPRESS_BASE_URL');
#    The cypress.config.ts already loads these into Cypress.env.
#
# For CI/CD:
# - Do NOT commit the .env file with real secrets.
# - Configure these environment variables directly in your CI/CD system's settings (e.g., Jenkins environment variables, GitHub Secrets).
# - The application will automatically pick them up if `dotenv.config()` is called or if they are set in the environment.
# - The `cypress.config.ts` is set up to load `process.env` which includes CI variables.
#
# Secret Masking:
# - Values for keys containing 'PASSWORD', 'TOKEN', 'SECRET', 'KEY' (common patterns)
#   are often automatically masked in Cypress Cloud dashboard logs.
# - Be cautious when logging `Cypress.env()` directly.
# - For sensitive values that must be used but not logged, try to use them without explicit logging.
#   Cypress command log can be configured to hide XHR requests if they contain sensitive data in URLs.
#   (See `hideXHRInCommandLog` option - though it's not a foolproof solution for all cases).
